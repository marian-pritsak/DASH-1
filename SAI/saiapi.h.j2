/**
 * Copyright (c) 2014 Microsoft Open Technologies, Inc.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License"); you may
 *    not use this file except in compliance with the License. You may obtain
 *    a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 *    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
 *    CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
 *    LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS
 *    FOR A PARTICULAR PURPOSE, MERCHANTABILITY OR NON-INFRINGEMENT.
 *
 *    See the Apache Version 2.0 License for specific language governing
 *    permissions and limitations under the License.
 *
 *    Microsoft would like to thank the following companies for their review and
 *    assistance with these files: Intel Corporation, Mellanox Technologies Ltd,
 *    Dell Products, L.P., Facebook, Inc., Marvell International Ltd.
 *
 * @file    saiexperimental{{ sai_api.app_name }}.h
 *
 * @brief   This module defines SAI P4 extension  interface
 */

#if !defined (__SAIEXPERIMENTAL{{ sai_api.app_name | upper }}_H_)
#define __SAIEXPERIMENTAL{{ sai_api.app_name | upper}}_H_

#include <saitypes.h>

/**
 * @defgroup SAIEXPERIMENTAL{{ sai_api.app_name | upper}} SAI - Extension specific API definitions
 *
 * @{
 */

{% for table in sai_api.tables %}
{% if table.actions | length > 1 %}
/**
 * @brief Attribute data for #SAI_{{ table.name | upper }}_ATTR_ACTION
 */
typedef enum _sai_{{ table.name }}_action_t
{
{% for action in table.actions %}
    SAI_{{ table.name | upper }}_ACTION_{{ action.name | upper }},

{% endfor %}
} sai_{{ table.name }}_action_t;

{% endif %}
{% endfor %}
{% for table in sai_api.tables %}
{% if table.is_object == 'false' %}
/**
 * @brief Entry for {{ table.name }}
 */
typedef struct _sai_{{ table.name }}_t
{
    /**
     * @brief Switch ID
     *
     * @objects SAI_OBJECT_TYPE_SWITCH
     */
    sai_object_id_t switch_id;

{% for key in table['keys'] %}
    /**
     * @brief {{ key.match_type | capitalize | replace('Lpm', 'LPM') }} matched key {{ key.sai_key_name }}
     */
{% if key.match_type == 'lpm' %}
    {{ key.sai_lpm_type }} {{ key.sai_key_name }};
{% elif key.match_type == 'list' %}
    {{ key.sai_list_type }} {{ key.sai_key_name }};
{% elif key.match_type == 'range_list' %}
    {{ key.sai_range_list_type }} {{ key.sai_key_name }};
{% else %}
    {{ key.sai_key_type }} {{ key.sai_key_name }};
{% endif %}

{% endfor %}
} sai_{{ table.name }}_t;

{% endif %}
/**
 * @brief Attribute ID for {{ table.name }}
 */
typedef enum _sai_{{ table.name }}_attr_t
{
    /**
     * @brief Start of attributes
     */
    SAI_{{ table.name | upper }}_ATTR_START,
    /** @ignore - for implementation */
    SAI_{{ table.name | upper }}_ATTR_ACTION_START = SAI_{{ table.name | upper }}_ATTR_START,

{% if table.actions | length > 1 %}
    /**
     * @brief Action
     *
     * @type sai_{{ table.name }}_action_t
     * @flags CREATE_AND_SET
     * @default SAI_{{ table.name | upper }}_ACTION_{{ table.actions[0].name | upper }}
     */
    SAI_{{ table.name | upper }}_ATTR_ACTION,

{% endif %}
    /** @ignore - for implementation */
    SAI_{{ table.name | upper }}_ATTR_ACTION_END,
    /** @ignore - for implementation */
    SAI_{{ table.name | upper }}_ATTR_KEY_START = SAI_{{ table.name | upper }}_ATTR_ACTION_END,
{% if table.is_object == 'true' %}
{% for key in table['keys'] %}
    /**
     * @brief {{ key.match_type | capitalize | replace('Lpm', 'LPM') }} matched key {{ key.sai_key_name }}
     *
{% if key.match_type == 'lpm' %}
     * @type {{ key.sai_lpm_type }}
{% elif key.match_type == 'list' %}
     * @type {{ key.sai_list_type }}
{% elif key.match_type == 'range_list' %}
     * @type {{ key.sai_range_list_type }}
{% else %}
     * @type {{ key.sai_key_type }}
{% endif %}
     * @flags MANDATORY_ON_CREATE | CREATE_ONLY
{% if key.sai_key_type == 'sai_uint16_t' %}
     * @isvlan false
{% endif %}
     */
    SAI_{{ table.name | upper }}_ATTR_{{ key.sai_key_name | upper }},

{% endfor %}
{% endif %}
    /** @ignore - for implementation */
    SAI_{{ table.name | upper }}_ATTR_KEY_END,
    /** @ignore - for implementation */
    SAI_{{ table.name | upper }}_ATTR_PARAM_START = SAI_{{ table.name | upper }}_ATTR_KEY_END,

{% for action in table.actions %}
{% for param in action.params %}
    /**
     * @brief Action {{ action.name }} parameter {{ param.name | upper }}
     *
     * @type {{ param.type }}
     * @flags CREATE_AND_SET
{% if param.type == 'sai_uint16_t' %}
     * @isvlan false
{% endif %}
{% if table.actions | length > 1 %}
     * @condition SAI_{{ table.name | upper }}_ATTR_ACTION == SAI_{{ table.name | upper }}_ACTION_{{ action.name | upper }}
{% endif %}
{% if param.type == 'sai_ip_address_t' %}
     * @default 0.0.0.0
{% elif param.type == 'sai_mac_t' %}
     * @default 0:0:0:0:0:0
{% elif param.type == 'bool' %}
     * @default false
{% else %}
     * @default 0
{% endif %}
     */
    SAI_{{ table.name | upper }}_ATTR_{{ param.name | upper }},

{% endfor %}
{% endfor %}
    /** @ignore - for implementation */
    SAI_{{ table.name | upper }}_ATTR_PARAM_END,
    /**
     * @brief End of attributes
     */
    SAI_{{ table.name | upper }}_ATTR_END,

    /** Custom range base value */
    SAI_{{ table.name | upper }}_ATTR_CUSTOM_RANGE_START = 0x10000000,

    /** End of custom range base */
    SAI_{{ table.name | upper }}_ATTR_CUSTOM_RANGE_END,

} sai_{{ table.name }}_attr_t;

{% endfor %}
{% for table in sai_api.tables %}
/**
 * @brief Create {{ table.name }}
 *
{% if table.is_object == 'true' %}
 * @param[out] {{ table.name }}_id Entry id
 * @param[in] switch_id Switch id
{% else %}
 * @param[in] {{ table.name }} Entry
{% endif %}
 * @param[in] attr_count Number of attributes
 * @param[in] attr_list Array of attributes
 *
 * @return #SAI_STATUS_SUCCESS on success Failure status code on error
 */
typedef sai_status_t (*sai_create_{{ table.name }}_fn)(
{% if table.is_object == 'true' %}
        _Out_ sai_object_id_t *{{ table.name }}_id,
        _In_ sai_object_id_t switch_id,
{% else %}
        _In_ const sai_{{ table.name }}_t *{{ table.name }},
{% endif %}
        _In_ uint32_t attr_count,
        _In_ const sai_attribute_t *attr_list);

/**
 * @brief Remove {{ table.name }}
 *
{% if table.is_object == 'true' %}
 * @param[in] {{ table.name }}_id Entry id
{% else %}
 * @param[in] {{ table.name }} Entry
{% endif %}
 *
 * @return #SAI_STATUS_SUCCESS on success Failure status code on error
 */
typedef sai_status_t (*sai_remove_{{ table.name }}_fn)(
{% if table.is_object == 'true' %}
        _In_ sai_object_id_t {{ table.name }}_id);
{% else %}
        _In_ const sai_{{ table.name }}_t *{{ table.name }});
{% endif %}

/**
 * @brief Set attribute for {{ table.name }}
 *
{% if table.is_object == 'true' %}
 * @param[in] {{ table.name }}_id Entry id
{% else %}
 * @param[in] {{ table.name }} Entry
{% endif %}
 * @param[in] attr Attribute
 *
 * @return #SAI_STATUS_SUCCESS on success Failure status code on error
 */
typedef sai_status_t (*sai_set_{{ table.name }}_attribute_fn)(
{% if table.is_object == 'true' %}
        _In_ sai_object_id_t {{ table.name }}_id,
{% else %}
        _In_ const sai_{{ table.name }}_t *{{ table.name }},
{% endif %}
        _In_ const sai_attribute_t *attr);

/**
 * @brief Get attribute for {{ table.name }}
 *
{% if table.is_object == 'true' %}
 * @param[in] {{ table.name }}_id Entry id
{% else %}
 * @param[in] {{ table.name }} Entry
{% endif %}
 * @param[in] attr_count Number of attributes
 * @param[inout] attr_list Array of attributes
 *
 * @return #SAI_STATUS_SUCCESS on success Failure status code on error
 */
typedef sai_status_t (*sai_get_{{ table.name }}_attribute_fn)(
{% if table.is_object == 'true' %}
        _In_ sai_object_id_t {{ table.name }}_id,
{% else %}
        _In_ const sai_{{ table.name }}_t *{{ table.name }},
{% endif %}
        _In_ uint32_t attr_count,
        _Inout_ sai_attribute_t *attr_list);

{% endfor %}
typedef struct _sai_{{ sai_api.app_name }}_api_t
{
{% set table_name_max = sai_api.tables|map(attribute="name")|map("length") | max %}
{% for table in sai_api.tables %}
{% set space_offset = table_name_max - table.name | length %}
    sai_create_{{ table.name }}_fn           {{ " " * space_offset }}create_{{ table.name }};
    sai_remove_{{ table.name }}_fn           {{ " " * space_offset }}remove_{{ table.name }};
    sai_set_{{ table.name }}_attribute_fn    {{ " " * space_offset }}set_{{ table.name }}_attribute;
    sai_get_{{ table.name }}_attribute_fn    {{ " " * space_offset }}get_{{ table.name }}_attribute;
{% endfor %}
} sai_{{ sai_api.app_name }}_api_t;

/**
 * @}
 */
#endif /** __SAIEXPERIMENTAL{{ sai_api.app_name | upper}}_H_ */

